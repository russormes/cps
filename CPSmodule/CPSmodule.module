<?php

function CPSmodule_form_charge_node_form_alter(&$form, &$form_state, $form_id) {
   //dpm("_charge_node_form_alter");
   $form['field_charge_date_entered']['#access'] = 0;
   $form['title']['#access'] = 0;
}

function CPSmodule_form_owner_node_form_alter(&$form, &$form_state, $form_id) {
   //dpm("_owner_node_form_alter");
   //$form['title']['#access'] = 0;
}

function CPSmodule_form_property_node_form_alter(&$form, &$form_state, $form_id) {
   //dpm("_property_node_form_alter");
   $form['field_property_service_charge'][LANGUAGE_NONE]['#ajax'] = array(
    // When 'event' occurs, Drupal will perform an ajax request in the
    // background. Usually the default value is sufficient (eg. change for
    // select elements), but valid values include any jQuery event,
    // most notably 'mousedown', 'blur', and 'submit'.
    'event' => 'change',
    'callback' => 'CPSmodule_ajax_form_property_node_callback',
    'wrapper' => 'sc_payment_update',
  );
   $form['field_property_sc_frequency'][LANGUAGE_NONE]['#ajax'] = array(
    // When 'event' occurs, Drupal will perform an ajax request in the
    // background. Usually the default value is sufficient (eg. change for
    // select elements), but valid values include any jQuery event,
    // most notably 'mousedown', 'blur', and 'submit'.
    //'event' => 'change',
    'callback' => 'CPSmodule_ajax_form_property_node_callback',
    'wrapper' => 'sc_payment_update',
  );
  $form['field_property_sc_payments']['und']['#prefix'] = '<div id="sc_payment_update">';
  $form['field_property_sc_payments']['und']['#suffix'] = '</div>';
  $form['field_property_sc_payments']['und'][0]['amount']['#default_value'] = CPSmodule_sc_payments_value($form, $form_state);
  $form_state['input']['field_property_sc_payments']['und'][0]['amount'] = CPSmodule_sc_payments_value($form, $form_state);
  $form['field_property_sc_payments']['und'][0]['currency']['#default_value'] = "GBP";
  //dpm('form:');
  //dpm($form);
  //dpm('form_state[input]:');
  //dpm($form_state['input']);
  //$node = $form['#node'];
  //dpm('node:');
  //dpm($node);
}

function CPSmodule_form_payment_node_form_alter(&$form, &$form_state, $form_id) {
  //dpm("payment_node_form_alter");
  //Hide the date entered field from the user as it is automaticallly filled in.
  //note that this might not be needed as node creation time is stored in the db by core code. 
  $form['field_payment_date_entered']['#access'] = 0;
  $form['title']['#access'] = 0;
  $form['field_payment_charge']['#access'] = 0;
  $node = $form['#node'];
  $onid = '';
  $arg_array = arg();
  $prop_nid = end($arg_array);
  if ($prop_nid == 'edit') {
    $onid = $node->field_payment_owner['und'][0]['target_id'];
  } else {
    if(ctype_digit($prop_nid)) { 
      $prop_node = node_load($prop_nid);
      $onid = $prop_node->field_property_owner['und'][0]['target_id'];
      $own_node = node_load($onid);
      $form['field_payment_owner'][LANGUAGE_NONE][0]['target_id']['#default_value'] = "$own_node->title ($own_node->nid)";
      $form['field_payment_property'][LANGUAGE_NONE]['#default_value'] = $prop_node->nid;
    }
  }
    // Get the list of options to populate the first dropdown.    
  $property_options = CPSmodule_property_dropdown_options($onid);
  $form['field_payment_property'][LANGUAGE_NONE]['#options'] = $property_options;
}

function CPSmodule_sc_payments_value($form, $form_state) {
  //dpm('_sc_payments_value called');
  $sv = isset($form_state['values']['field_property_sc_frequency'][LANGUAGE_NONE][0]['value']) ?
           $form_state['values']['field_property_sc_frequency'][LANGUAGE_NONE][0]['value'] :
	   $form['#node']->field_property_sc_frequency['und'][0]['value'];
  $amount = isset($form_state['input']['field_property_service_charge']['und'][0]['amount']) ?
              $form_state['input']['field_property_service_charge']['und'][0]['amount'] :
	      $form['#node']->field_property_service_charge['und'][0]['amount'];
  switch ($sv) {
    case '0':
      return round($amount/12,2);
    case '1':
      return round($amount/2,2);
    case '2':
      return $amount;
  }
}
  
 /**
 * Helper function to populate the first dropdown. This gets
 * data from the database. 
 *
 * @return array of options
 */
function CPSmodule_property_dropdown_options($key = '') {
  $query = new EntityFieldQuery();
  $return_values = array();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'property');
    if (!empty($key)) { $query->fieldCondition('field_property_owner', 'target_id', $key, '='); }
  $result = $query->execute();
  $node_list = $result['node'];
  foreach ($node_list as $node_obj) {
    $node_id = $node_obj -> nid;
    $sql = 'SELECT nid, title FROM {node} WHERE nid = :nids';
    $query_result = db_query($sql, array(':nids' => $node_id))->fetchAllAssoc('nid');
    foreach ($query_result as $val) {
      $return_values[$node_id] = $val -> title;
    }
  } //else {return array('000' => 'All properties');}
  return $return_values;
}

/**
 * Returns changed part of the form.
 *
*/

function CPSmodule_ajax_form_property_node_callback($form, $form_state) {
  //dpm("Called: _ajax_form_property_node_callback");
  return $form['field_property_sc_payments'];
}
/**
 * Implements hook_node_submit().
 * @see CPSmodule_form_payment_node_form_alter()
 */
function CPSmodule_node_submit($node, $form, &$form_state) {
  //dpm("Called: _submit");
  $values = $form_state['values'];
  switch ($node->type) {
    case 'payment':
      $pnid = $values['field_payment_property']['und'][0]['target_id'];
      $pnode = node_load($pnid);
      $date = $form_state['input']['field_payment_date_received']['und'][0]['value']['date'];
      $node->title = $pnode->title.' : £'.$values['field_payment_amount']['und'][0]['amount'].' : '.$date;
      break;
    case 'charge':
      $pnid = $values['field_charge_property_id']['und'][0]['target_id'];
      $ctypetid = $values['field_charge_type']['und'][0]['tid'];
      $pnode = node_load($pnid);
      $ctype = taxonomy_term_load($ctypetid);
      $node->title = $pnode->title.' '.$ctype->name.': £'.$values['field_charge_amount']['und'][0]['amount'];
      break;
  }
//dpm('_node_submit: ');
}


/**
 * Implements hook_menu().
 */
function CPSmodule_menu() {

  $items['payment_by_code'] = array(
    'title' => 'Add new payment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('add_payment_by_code_form'),
    'access callback' => 'user_access',
    'access arguments' => array('Add Payment'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['list_payments_by_prop'] = array(
    'title' => 'List payments by property',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('list_payments_by_prop_form'),
    'access callback' => 'user_access',
    'access arguments' => array('List Payment by Prop'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['list_charges_by_prop'] = array(
    'title' => 'List charges by property',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('list_charges_by_prop_form'),
    'access callback' => 'user_access',
    'access arguments' => array('List Charge by Prop'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['property_account_summary'] = array(
    'title' => 'Property account summary',
    'page callback' => 'CPSmodule_property_account_summary_view',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('List Charge by Prop'),
  );
  
  return $items;
}

/**
* Implementation of hook_permission()
*/
function CPSmodule_permission() {
  //dpm('CPSmodule_permission');
  return array(
    'Add Payment' => array(
      'title' => t('Add a payment'),
      'description' => t('Allow users to add a payment'),
    ),
    'List Payment by Prop' => array(
      'title' => t('List payments by prop'),
      'description' => t('Allow users to list payments by entering property code'),
    ),
    'List Charge by Prop' => array(
      'title' => t('List charges by prop'),
      'description' => t('Allow users to list charges by entering property code'),
    ),
  );
}


/**
* Define a form. The entry form for adding the apartment code for payment. 
*/
function add_payment_by_code_form() {
  $form['add_payment'] = array(
    '#title' => t('Property code'),
    '#type' => 'textfield',
    '#description' => t('Please enter the CPS property/payment code.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit')
  );

  return $form;
}

/**
* Define a form. The entry form for listing the payments from the property code. 
*/
function list_payments_by_prop_form() {
  $form['list_payments_by_prop'] = array(
    '#title' => t('Property code'),
    '#type' => 'textfield',
    '#description' => t('Please enter the CPS property code.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit')
  );

  return $form;
}

/**
* Define a form. The entry form for listing the charges from the property code. 
*/
function list_charges_by_prop_form() {
  $form['list_charges_by_prop'] = array(
    '#title' => t('Property code'),
    '#type' => 'textfield',
    '#description' => t('Please enter the CPS property code.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit')
  );

  return $form;
}

/** When the form is submitted we get the nid for the property that the payment
 * is made against pass it to the add payment form via the URL. ::ISSUE 1::
 **/
function add_payment_by_code_form_submit($form, &$form_state) {
  $title = $form_state['values']['add_payment'];
  $type = 'property';
  $result = db_query("SELECT n.nid FROM {node} n WHERE n.title = :title AND
		     n.type = :type", array(":title"=> $title, ":type"=> $type));  
  $nid = $result->fetchField();
  if($nid !== FALSE) { 
    $form_state['redirect'] = 'node/add/payment/'.$nid;
  } else {
    drupal_set_message("There is no property registered to that CPS code");
  }
}

/** When the form is submitted we add the property code to the URL  
 * so the view is rendered using the context from the URL. ::ISSUE 1::
 **/
function list_payments_by_prop_form_submit($form, &$form_state) {
  $title = $form_state['values']['list_payments_by_prop'];
  $type = 'property';
  $result = db_query("SELECT n.nid FROM {node} n WHERE n.title = :title AND
		     n.type = :type", array(":title"=> $title, ":type"=> $type));  
  $nid = $result->fetchField();
  if($nid !== FALSE) { 
    $form_state['redirect'] = 'payment-by-property/'.$title;
  } else {
    drupal_set_message("There is no property registered to that CPS code");
  }
}

/** When the form is submitted we add the property code to the URL  
 * so the view is rendered using the context from the URL. ::ISSUE 1::
 **/
function list_charges_by_prop_form_submit($form, &$form_state) {
  $title = $form_state['values']['list_charges_by_prop'];
  $type = 'property';
  $result = db_query("SELECT n.nid FROM {node} n WHERE n.title = :title AND
		     n.type = :type", array(":title"=> $title, ":type"=> $type));  
  $nid = $result->fetchField();
  if($nid !== FALSE) { 
    $form_state['redirect'] = 'charge-by-property/'.$title;
  } else {
    drupal_set_message("There is no property registered to that CPS code");
  }
}

/* Function to build a page to view payment and charge totals for a given
   property. Will build a table of payment with a total, a table of charges
   with a total and produce a balance*/
function CPSmodule_property_account_summary_view($prop_nid) {
  $prop_node = node_load($prop_nid);
  //First we build a table of payments
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'payment');
  $query->fieldCondition('field_payment_property', 'target_id', $prop_nid, '=');
  $result = $query->execute();
  $node_list = $result['node'];
  $content = html_build_table_header('payment');
  $payment_total = 0;
  foreach ($node_list as $node_obj) {
    $pay_node = node_load($node_obj -> nid);
    $payment_total += $pay_node->field_payment_amount['und'][0]['amount'];
    $content .= html_build_table_row($pay_node);
  }
  $content .= html_build_table_footer($payment_total);
  
  //Now we build a table of charges
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'charge');
  $query->fieldCondition('field_charge_property_id', 'target_id', $prop_nid, '=');
  $result = $query->execute();
  $node_list = $result['node'];
  $content .= html_build_table_header('charge');
  $charge_total = 0;
  foreach ($node_list as $node_obj) {
    $charge_node = node_load($node_obj -> nid);
    $charge_total += $charge_node->field_charge_amount['und'][0]['amount'];
    $content .= html_build_table_row($charge_node);
  }
  $content .= html_build_table_footer($charge_total);
  
  return $content.'<p align="right">Balance: £'.($payment_total - $charge_total).'</p>';
}

function html_build_table_header($table_type){
  $h_col1 = '';
  $h_col2 = '';
  $h_col3 = '';
  
  switch ($table_type) {
    case 'payment':
      $h_col1 = 'Payment';
      $h_col2 = 'Date of payment';
      $h_col3 = 'Amount';
      break;
    case 'charge':
      $h_col1 = 'Charge';
      $h_col2 = 'Type';
      $h_col3 = 'Amount';
  }
  return '
    <div>
      <table>
	<colgroup>
	  <col span="1" style="width: 45%;">
	  <col span="1" style="width: 45%;">
	  <col span="1" style="width: 10%;">
	  </colgroup>
	<thead>
	  <tr>
	    <th>
	      '.$h_col1.'
	    </th>
	    <th>
	      '.$h_col2.'
	    </th>
	    <th>
	      '.$h_col3.'
	    </th>
	  </tr>
	</thead>
	<tbody>';
}

function html_build_table_row($node) {
  $html_string ='
      <tr>
	<td>
	  <a href="/cps/?q=node/'.$node->nid.'">'.$node->title.'</a>
	</td>
	<td>
	  '.($node->type == 'payment' ?
	      $node->field_payment_date_received['und'][0]['value'] :
	      $node->field_charge_type['und'][0]['tid']).'
	</td>
	<td>
	  £'.($node->type == 'payment' ?
	       $node->field_payment_amount['und'][0]['amount'] :
	        $node->field_charge_amount['und'][0]['amount']).'
	</td>
      </tr>';
  return $html_string;
}

function html_build_table_footer($total) {
  return '
	</tbody>
	<tfoot>
	  <tr>
	    <th></th>
	    <th></th>
	    <th>
	      £'.$total.'
	    </th>
	  </tr>
	</tfoot>
      </table>
    </div>';
}
?>