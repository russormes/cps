<?php
/**
 * @file
 * Custom module for the CPS Admin application
 * By Nectar Software Ltd
 */

/**
 * Implements hook_form_alter() to adjust the core node forms.
 * Mainly I am hidding the entry date fields for charge and payment creations. 
 */
function CPSmodule_form_alter(&$form, &$form_state, $form_id) {
  switch($form_id) {
    case "charge_node_form":
        $form['field_charge_date_entered']['#access'] = 0;
      break;
  }
}

/**use the payment form alter hook to prepoulate fields and select lists**/
function CPSmodule_form_payment_node_form_alter(&$form, &$form_state, $form_id) {
  //Hide the date entered field from the user. 
  $form['field_payment_date_entered']['#access'] = 0;

/** Think about a better way to get the id from the URL. I am worried this might break in 
 * the future.   
  $arg_array = arg();
  $nid = end($arg_array);
  **/
  //Grab the node id for the property passed for the add payment page and use it to load the property node
  // set the owner field on the form. 
  $nid = arg(3);
  if($nid !== NULL) { 
    $prop_node = node_load($nid);
    $onid = $prop_node->field_property_owner['und'][0]['target_id'];
    $own_node = node_load($onid);
    //This is wrong. It should be the node ID not the title that is saved here. 
    $form['field_payment_owner']["und"][0]['target_id']['#default_value'] = $own_node->title;

    // Get the list of options to populate the first dropdown.    
    $property_options = CPSmodule_property_dropdown_options($onid);

    // If we have a value for the property dropdown from $form_state['values'] we use
    // this both as the default value for the property dropdown and also as a
    // parameter to pass to the function that retrieves the options for the
    // charge dropdown.
    $value_dropdown_property = $prop_node -> nid;
//    $isItSet = isset($form_state['values']['field_payment_allocation'][LANGUAGE_NONE][0]['field_payment_property']);
    $value_dropdown_property = 
      isset($form_state['values']['field_payment_allocation'][LANGUAGE_NONE][0]['field_payment_property']) ? $form_state['values']['field_payment_allocation'][LANGUAGE_NONE][0]['field_payment_property'] : $value_dropdown_property;
    $form['field_payment_allocation'][LANGUAGE_NONE][0]['field_payment_property'] = array(
        '#type' => 'select',
        '#title' => 'Property',
        '#options' => $property_options,
        '#default_value' => $value_dropdown_property,
        // Bind an ajax callback to the change event (which is the default for the
        // select form type) of the first dropdown. It will replace the second
        // dropdown when rebuilt
        '#ajax' => array(
            // When 'event' occurs, Drupal will perform an ajax request in the
            // background. Usually the default value is sufficient (eg. change for
            // select elements), but valid values include any jQuery event,
            // most notably 'mousedown', 'blur', and 'submit'.
            'event' => 'change',
            'callback' => 'CPSmodule_ajax_callback',
            'wrapper' => 'dropdown_charge_replace',
        ),
    );
    $form['field_payment_allocation'][LANGUAGE_NONE][0]['field_payment_charge_allocation'] = array(
        '#type' => 'select',
        '#title' => 'Charge to allocate payment to:',
       '#prefix' => '<div id="dropdown_charge_replace">',
        '#suffix' => '</div>',
        // when the form is rebuilt during ajax processing, the $value_dropdown_first variable
        // will now have the new value and so the options will change
        '#options' => CPSmodule_charge_dropdown_options($value_dropdown_property),
        '#default_value' => isset($form_state['values']['field_payment_allocation'][LANGUAGE_NONE][0]['field_payment_charge_allocation']) ? $form_state['values']['field_payment_allocation'][LANGUAGE_NONE][0]['field_payment_charge_allocation'] : 'Boo!',
    );
    // The entire enclosing div created here gets replaced when dropdown_first
    // is changed.
/**    $form['field_payment_allocation'][LANGUAGE_NONE][0]['field_payment_charge_allocate']['#prefix'] = '<div id="dropdown_charge_replace">';
    $form['field_payment_allocation'][LANGUAGE_NONE][0]['field_payment_charge_allocate']['#suffix'] = '</div>';
    $form['field_payment_allocation'][LANGUAGE_NONE][0]['field_payment_charge_allocate'][LANGUAGE_NONE]['#options'] =
      CPSmodule_charge_dropdown_options($value_dropdown_property);
**/
/**     // when the form is rebuilt during ajax processing, the $value_dropdown_property variable
      // will now have the new value and so the options will change
      '#options' => CPSmodule_charge_dropdown_options($value_dropdown_property),
      '#default_value' => isset($form_state['values']['dropdown_second']) ? $form_state['values']['dropdown_second'] : '',**/
   }
   dpm($form);
//   dpm($form_state);
  $form['#after_build'][] = 'CPSmodule_after_build'; 
  return $form;
}

/**
 * Helper function to populate the first dropdown. This would normally be
 * pulling data from the database.
 *
 * @return array of options
 */
function CPSmodule_property_dropdown_options($key = '') {
  $query = new EntityFieldQuery();
  $return_values = array();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'property')
    ->fieldCondition('field_property_owner', 'target_id', $key, '=');
  $result = $query->execute();
  $node_list = $result['node'];
  foreach ($node_list as $node_obj) {
    $node_id = $node_obj -> nid;
    $sql = 'SELECT nid, title FROM {node} WHERE nid = :nids';
    $query_result = db_query($sql, array(':nids' => $node_id))->fetchAllAssoc('nid');
    foreach ($query_result as $val) {
      $return_values[$node_id] = $val -> title;
    }
  }
  return $return_values;
}

function CPSmodule_charge_dropdown_options($key = '') {
//  dpm($key);
  if ($key == '1277') {
    return array(
      123 => "SC JAN",
      124 => "SC FEB",
    );
  } else {
    return array(
      123 => "SC MAR",
      124 => "SC APR",
    );
  }
}

function CPSmodule_ajax_callback($form, $form_state) {
  return $form['field_payment_allocation'][LANGUAGE_NONE][0]['field_payment_charge_allocation'];
}

/**
 * Implementation of hook_menu().
 * Create a page that is the access page to create new payment. All payments in the system 
 * will be created via this route action. 
 */

function CPSmodule_after_build($form, &$form_state) {
  //make necessary changes to the $form variable
  dpm($form);
  dpm($form_state);

  return $form;
}

function CPSmodule_ajax_test_callback($form, $form_state) {
    return $form['dropdown_second'];
}


/**
 * Helper function to populate the first dropdown. This would normally be
 * pulling data from the database.
 *
 * @return array of options
 */
function CPSmodule_first_dropdown_options() {
    return array(
        'colors' => 'Names of colors',
        'cities' => 'Names of cities',
        'animals' => 'Names of animals',
    );
}


/**
 * Helper function to populate the second dropdown. This would normally be
 * pulling data from the database.
 *
 * @param key. This will determine which set of options is returned.
 *
 * @return array of options
 */
function CPSmodule_second_dropdown_options($key = '') {
    $options = array(
        'colors' => array(
            'red' => 'Red',
            'green' => 'Green',
            'blue' => 'Blue'
        ),
        'cities' => array(
            'paris' => 'Paris, France',
            'tokyo' => 'Tokyo, Japan',
            'newyork' => 'New York, US'
        ),
        'animals' => array(
            'dog' => 'Dog',
            'cat' => 'Cat',
            'bird' => 'Bird'
        ),  
    );
    if (isset($options[$key])) {
        return $options[$key];
    }
    else {
        return array();
    }
}

function CPSmodule_menu() {

  $items['payment_by_code'] = array(
    'title' => 'Add new payment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('add_payment_by_code_form'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['test_select'] = array(
            'title' => 'A page to test ajax',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('CPSmodule_page'),
            'access arguments' => array('access content'), 
            'access callback' => TRUE,
            'type' => MENU_NORMAL_ITEM,
    );
  
  return $items;
}

/**
* Define a form. The entry form for adding the apartment code for payment. 
*/
function add_payment_by_code_form() {
  $form['add_payment'] = array(
    '#title' => t('Payment code'),
    '#type' => 'textfield',
    '#description' => t('Please enter the CPS payment code.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit')
  );

  return $form;
}

function CPSmodule_page($form, &$form_state) {
    // Get the list of options to populate the first dropdown.
    $options_first = CPSmodule_first_dropdown_options();

    // If we have a value for the first dropdown from $form_state['values'] we use
    // this both as the default value for the first dropdown and also as a
    // parameter to pass to the function that retrieves the options for the
    // second dropdown.
    $value_dropdown_first = isset($form_state['values']['dropdown_first']) ? $form_state['values']['dropdown_first'] : key($options_first);

    $form['dropdown_first'] = array(
        '#type' => 'select',
        '#title' => 'First Dropdown',
        '#options' => $options_first,
        '#default_value' => $value_dropdown_first,

        // Bind an ajax callback to the change event (which is the default for the
        // select form type) of the first dropdown. It will replace the second
        // dropdown when rebuilt
        '#ajax' => array(
            // When 'event' occurs, Drupal will perform an ajax request in the
            // background. Usually the default value is sufficient (eg. change for
            // select elements), but valid values include any jQuery event,
            // most notably 'mousedown', 'blur', and 'submit'.
            'event' => 'change',
            'callback' => 'CPSmodule_ajax_test_callback',
            'wrapper' => 'dropdown_second_replace',
        ),
    );
    $form['dropdown_second'] = array(
        '#type' => 'select',
        '#title' => 'Second Dropdown',
        // The entire enclosing div created here gets replaced when dropdown_first
        // is changed.
        '#prefix' => '<div id="dropdown_second_replace">',
        '#suffix' => '</div>',
        // when the form is rebuilt during ajax processing, the $value_dropdown_first variable
        // will now have the new value and so the options will change
        '#options' => CPSmodule_second_dropdown_options($value_dropdown_first),
        '#default_value' => isset($form_state['values']['dropdown_second']) ? $form_state['values']['dropdown_second'] : '',
    );
    return $form;
}

/** When the form is submitted we get the nid for the property that the payment is made against pass it 
 * to the add payment form via the URL. ::ISSUE 1::
 **/
function add_payment_by_code_form_submit($form, &$form_state) {
  $title = $form_state['values']['add_payment'];
  $type = 'property';
  $result = db_query("SELECT n.nid FROM {node} n WHERE n.title = :title AND n.type = :type", array(":title"=> $title, ":type"=> $type));  
  $nid = $result->fetchField();
  if($nid !== FALSE) { 
    $form_state['redirect'] = 'node/add/payment/'.$nid;
  } else {
    drupal_set_message("There is no property registered to that CPS code");
  }
  $_SESSION['user_input'] = $form_state['values'];
}


/** Instead I use the development module and dpm() to see what is going on behind the scenes. 
Write the name of the form you load to the log file for debugging help
  watchdog('CPSmodule', 'The form is called: %form_id', array('%form_id' => $form_id)); 
**/

?>

